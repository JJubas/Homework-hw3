public class CustomerServiceRepScores
{
	private int repQuantity;
	private int numberOfPossibleScores
	private int[][] scores;

	public CustomerServiceRepScores (int repQuantity, int scoreQuantity)
{
		this.repQuantity = repQuantity;
		this.numberOfPossibleScores = scoreQuantity;
		this.scores = new
int[this.repQuantity][this.numberOfPossibleScores];
	// initialize all score counts to zero
	for (int i = 0; i < this.scores.length; i++)
	{
		Arrays.fill(this.scores[i],0);
	}
}

/**
*
*@param repID the representative who recieved this score.
*@param score the score recieved.
*/
public void addNewScore(int repID, int score)
{
	this.scores[repID][score-1] += 1;
}

/**
*
*@param repID the id of the rep
*@return an array of length this.numberOfPossibleScores with the curreny score totals for the rep.
*/

public int[] getCumulativeScoreForRep(int repID)
{
	return Arrays.copyof(this.scores[repID], this.scores[repID].length);
}

/**
*
*@param repID the id of the rep
*@return the average score of the rep
*/

public double CustomerServiceAverageRepScores(int repID)
{
int sum = 0;
double average;

for (int i = 0; i < scores.length; i++) {
	sum = sum += score[i]
	}
	average = (double)sum/ scores.length;
	return average;
	}
	
/**
*
*@param repID the id of the rep
*@return the current cumulative scores
*/

public int CustomerServiceCumulativeRepScores(int repID)
{
	int sum = 0;
	for (int i : scores) {
		sum += i;
		}
	return sum;
}

/**
*
*@param repID the id of the rep
*resets the score array to 0
*/

public void CustomerServiceResetRepScores(int repID)
{
// set all score counts to zero
	for (int i = 0; i < this.scores.length; i++)
	{
		Arrays.fill(this.scores[i],0);
	}
}

/**
*
*clear out the array and replace the numbers with 0
*
*/

public void ResetAllScores;
{
	// set all score counts to zero
	for (int i = 0; i < this.scores.length; i++)
	{
		Arrays.fill(this.scores[i],0);
	}
}

/**
*
*@param repID of the rep
*print out a message if the average is below 2.5
*
*/

public void BadAverage (int repID)
{
	//recall the method for checking the average
	if (average <= 2.5) {
	system.out.println("Rep" + repID + "'s running average has dropped to " + runningAverage)
	}
	else {
	//is there anyway to do nothing?
	}
	}
	
	//still need to include testing 